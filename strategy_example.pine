// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © diegonavarromartinez

// Version 346.0
// Created: 20/09/2023
// Last Modified: 07-09-2024
// Situation: Development
// Parameters: Defaults fixed to more aggresive mindset, I'll adjust them to a more conservative settings.
// Market: BTC/USDT
// Timeframe: 15 mmins
// BASIC SETTINGS: default
// COMMENTS: In this version I've working with takeprofit prices to enter or exit positions. This gives some stability
//           in terms of variability tolerance but it seems to miss some good opportunities. In the next experiment I will
//           trust in the indicator only (when signal says Enter Long, go and Buy and vice-versa) 
// UPDATE 09-2024: Now working on a dynamic trailing stop to adjust the stop loss value based on volatility using ATR to 
//                 capture some good opportunities and also, enter position confirmation using ADX to complement RSI and signals.
//
// *****************************************************************************************************************************
// STRATEGY NAME: Half Normal Distribution wheighted by Fibbonacci numbers + 2PSSF
// DESCRIPTION  : Strategy based on Loxx One-Sided Gaussian Filter and addapted from Forex to Crypto Trading.
//
// DETAILS & RATIONALE: 
// The Gaussian moving average (GA) is a technical analysis tool that is used to smooth out price data and identify trends. 
// It is similar to a simple moving average (SMA), but instead of using equal weights for each value in the calculation, 
// it uses a Gaussian distribution to assign weights. This means that the values at the edges of the calculation window have 
// lower weights and are given less importance in the moving average calculation, while the values at the center of the window 
// have higher weights and are given more importance. This helps to reduce the impact of noisy or outlying data points on the 
// moving average and make it more responsive to changes in the underlying trend.
// Now, the moving average in this strategy is calculated using a fibbonacci weighting function, and the normal distribution is
// evaluated using a half normal distribution only, and then 2PSSF is applied to reduce noise.
// In a Fibonacci moving average (FWMA), the data will be weighted based on the Fibonacci Series starting from 1 (for the furthest 
// data point) so for example, if we use a length of 10, the weights will be 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 with the 55 
// being the weight applied to the most recent / current bar's selected value (close, hl2, hc3..etc) and moving backward.
// Finally the John Ehlers's 2 Pole Super Smoother Filter follows the price very closely and very useful because it is 
// consistent with uptrends and falls sharply during a sudden downtrend so it should be able to help to stay more profitable.
// Additionally to the signaling, to decide when to enter to a position, it uses a mix of RSI and ADX indicators used together
// to confirm tendency in a trend-following setup like this. ADX measures the strength of a trend, not its direction and RSI 
// measures momentum, used toghether can help to make a stronger desition and help to detect reversals.
// Finally, in terms of risk management, I replaced the fixed MAX_LOSS_TOLERANCE parameter and CRASH_PROTECTION_PRICE to a dinamically
// evaluated Trailing Stop Price based on ATR with a threshold to decide to be more conservative or more aggresive based on market
// volatility. 
// 

// References: 
// https://www.tradingview.com/script/BCTSMir8-Gaussian-Moving-Average-GA/#:~:text=The%20Gaussian%20moving%20average%20(GA,Gaussian%20distribution%20to%20assign%20weights.
// https://www.tradingview.com/script/wf0rH5tf-TA-Basics-Creating-a-Fibonacci-Weighted-Moving-Average/
// https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/
// *****************************************************************************************************************************


//@version=5
//@strategy_alert_message {{strategy.order.alert_message}}
strategy("ST6-GMA_TEST_1", overlay=true, initial_capital = 100, default_qty_type=strategy.percent_of_equity, default_qty_value=100, max_bars_back = 5000, commission_type = strategy.commission.percent, commission_value = 0.0075, currency = currency.USD) //each trx is 20% of 100 USD capital

// ————— Imports

import diegonavarromartinez/base_helpers/4 as helpers

// ————— Constants

int     MS_IN_MIN                = 60 * 1000
int     MS_IN_HOUR               = MS_IN_MIN  * 60
int     MS_IN_DAY                = MS_IN_HOUR * 24
int     MAYOR_TREND_SLOW_EMA     = 80 
int     MINOR_TREND_SLOW_21_EMA  = 21
int     MINOR_TREND_FAST_13_EMA  = 15
int     TRIGGER_TREND_SLOW_5_EMA = 5
int     TRIGGER_TREND_FAST_3_EMA = 3

float   MAX_LOSS_TOLERANCE       = 0.15 //0.4% Loss over current position price
//float   PROFIT_TARGET            = 0.1
float   SPREAD                   = 0.018
float   CRASH_PROTECTION_PRICE   = 0.2
int     CANCELATION_WAIT_PERIODS = 250

greencolor                       = #2DD204
redcolor                         = #D2042D       


// ————— Inputs

// BACKTESTING DATE LIMITS
int start_day                   = input.int(title="Start Date", defval=1, minval=1, maxval = 31, group = "Backtesting Dates")
int start_month                 = input.int(title="Start Month", defval = 10, minval = 1, maxval = 12, group = "Backtesting Dates")
int start_year                  = input.int(title="Start Year", defval = 2023, group = "Backtesting Dates")
int end_day                     = input.int(title="End Day",  defval = 31, minval = 1, maxval = 31, group = "Backtesting Dates")
int end_month                   = input.int(title="End Month", defval = 10, minval = 1, maxval = 12, group = "Backtesting Dates")
int end_year                    = input.int(title="End Year",  defval = 2023, group = "Backtesting Dates")

//ALGO_TRADING SETTINGS
int smthper                     = input.int(15, "Guassian Levels Depth", maxval = 100, group=  "Basic Settings")
int extrasmthper                = input.int(10, "Extra Smoothing (2-Pole Ehlers Super Smoother) Period", group=  "Basic Settings")
int atrper                      = input.int(14, "ATR Period (14 to 21)", group = "Basic Settings")
float mult                      = input.float(1.5, "ATR Multiplier (1 to 2)", group = "Basic Settings")

//RISK & LOSS PROTECTION
float max_loss_tolerance        = input.float(title="MAX_LOSS_TOLERANCE", defval = MAX_LOSS_TOLERANCE, step = 0.15, group = "RISK & PROFIT") 
float spread                    = input.float(title="SPREAD", defval = SPREAD, step = 0.018, group = "RISK & PROFIT")
float crash_protection_price    = input.float(title="CRASH_PROTECTION_PRICE", defval = CRASH_PROTECTION_PRICE, step = 0.2, group = "RISK & PROFIT")
int   cancelation_wait_periods  = input.int(title="How many Bars to cancel position", defval=CANCELATION_WAIT_PERIODS, step=10, group="RISk & PROFIT")

//UI
colorbars                       = input.bool(true, "Color bars?", group = "UI Options")
showsignals                     = input.bool(true, "Show signals?", group = "UI Options")

//BOT CONFIG
string BOT_STRATEGY_ID                     = input.string(title="STRATEGY_ID", defval = "ST6-HNDFIBO", group= "BOT_CONFIGURATION")
string BOT_SESSION_ID                      = input.string(title="SESSION ID", defval = "7a8ebd47-1", group = "BOT_CONFIGURATION")
bool BOT_PRODUCTION_RUN                    = input.bool(title="IS PRODUCTION", defval = false, group = "BOT_CONFIGURATION") 
string BOT_WEBHOOK_KEY                     = input.string(title="BOT_WEBHOOK_KEY", defval = "tradingview", group= "BOT_CONFIGURATION")
string LONG_TRADE_MESSAGE_COMMENT          = input.string(title="LONG_TRADE_COMMENT", defval = "BUY", group = "BOT_CONFIGURATION")
string SHORT_TRADE_MESSAGE_COMMENT         = input.string(title="SHORT_TRADE_COMMENT", defval = "SELL", group = "BOT_CONFIGURATION")
string LONG_TRADE_EXIT_MESSAGE_COMMENT     = input.string(title="LONG_TRADE_EXIT_COMMENT", defval = "BUY_EX", group = "BOT_CONFIGURATION")
string SHORT_TRADE_EXIT_MESSAGE_COMMENT    = input.string(title="SHORT_TRADE_EXIT_COMMENT", defval = "SELL_EX", group = "BOT_CONFIGURATION")
string BUY_CANCEL_CONDITION_MESSAGE        = input.string(title="LONG_TRADE_CANCEL_COMMENT", defval = "BUY_CAN", group = "BOT_CONFIGURATION")


// ————— Functions Declarations


// Function to calculate 2PSSF
// John Ehlers's 2 Pole Super Smoother Filter
// Explaination: Follows the price very closely and very useful because it is consistent with uptrends and falls sharply 
// during a sudden downtrend so it should be able to help you stay more profitable. 
//Book reference : Cybernetic Analysis for Stocks and Futures: Cutting-Edge DSP Technology to Improve Your Trading p32
//Script references: https://www.tradingview.com/script/PAIrISU7-Ehlers-2-Pole-Super-Smoother-Filter-V2-CC/
TwoPoleSuperSmootherFilter(float src, int len) =>
    a1 = 0., b1 = 0.
    coef1 = 0., coef2 = 0., coef3 = 0.
    filt = 0., trig = 0.
    a1 := math.exp(-1.414 * math.pi / len)
    b1 := 2 * a1 * math.cos(1.414 * math.pi / len)
    coef2 := b1
    coef3 := -a1 * a1
    coef1 := 1 - coef2 - coef3
    filt := coef1 * src + coef2 * nz(filt[1]) + coef3 * nz(filt[2])
    filt := bar_index < 3 ? src : filt
    filt

//https://en.wikipedia.org/wiki/Normal_distribution
Gaussian(size, x)=>
    out = (math.exp(-x * x * 9 / ((size + 1) * (size + 1))))
    out

//calc fibonacci numbers 0, 1, 1, 2, 3, 5, 8, 13, 21 ... etc
FibLevels(len)=>
    arr_levels = array.new_float(len, 0.)
    t1 = 0, t2 = 1
    nxt = t1 + t2
    for i = 0 to len - 1 
        array.set(arr_levels, i, nxt)
        t1 := t2
        t2 := nxt
        nxt := t1 + t2
    arr_levels

//calc weights given fibo numbers and how many fibos chosen
Gassout(levels)=>
    perin = array.size(levels)
    arr_gauss = matrix.new<float>(perin, perin, 0.)
    for k = 0 to array.size(levels) - 1 
        sum = 0.
        for i = 0 to perin - 1 
            if (i >= array.get(levels, k)) 
                break
            matrix.set(arr_gauss, i, k, Gaussian(array.get(levels, k), i))
            sum += matrix.get(arr_gauss, i, k)
        for i = 0 to perin - 1
            if (i >= array.get(levels, k)) 
                break
            temp = matrix.get(arr_gauss, i, k) / sum
            matrix.set(arr_gauss, i, k, temp)
    arr_gauss  

//calc moving average applying fibo numbers
SmthMA(level, src, per)=>
    sum = 0.
    lvltemp = FibLevels(per)
    gtemp = Gassout(lvltemp)
    for i = 0 to matrix.rows(gtemp) - 1
        sum += matrix.get(gtemp, i, level) * nz(src[i])
    sum

//calc ADX (Average Directional Index) to confirm tendency strenght
calcADX(int period) =>
    // Calcular DM+ y DM-
    dm_plus = ta.change(high)
    dm_minus = ta.change(low)
    plus_dm = (dm_plus > dm_minus and dm_plus > 0) ? dm_plus : 0
    minus_dm = (dm_minus > dm_plus and dm_minus > 0) ? dm_minus : 0
    
    // Calcular ATR
    atr = ta.atr(period)

    // Calcular los valores direccionales
    di_plus = ta.sma(100 * (plus_dm / atr), period)
    di_minus = ta.sma(100 * (minus_dm / atr), period)

    // Calcular DX
    dx = 100 * math.abs(di_plus - di_minus) / (di_plus + di_minus)

    // Calcular ADX
    adx = ta.sma(dx, period)

    [di_plus, di_minus, adx]


// ————— Calculations

//Backtesting conditions parameters
between_dates   = (time >= timestamp("UTC-3", start_year, start_month, start_day, 0, 0)) and time < timestamp("UTC-3", end_year, end_month, end_day, 23, 59)

//Indicator logic
lmax     = smthper + 1
out1     = SmthMA(smthper, close, lmax)
out      = TwoPoleSuperSmootherFilter(out1, extrasmthper)
sig      = out[1]
colorout = out > sig ? greencolor : redcolor
atr      = ta.atr(atrper)
smax     = out + atr * mult
smin     = out - atr * mult

plot(smax, color = bar_index % 2 ? color.silver : na, linewidth = 1)
plot(smin, color = bar_index % 2 ? color.silver : na, linewidth = 1)

plot(out, "GMA", color = colorout, linewidth = 4)
barcolor(colorbars ? colorout : na)

//Indicator Results
goLong    = ta.crossover(out, sig)
goShort   = ta.crossunder(out, sig)

plotshape(goLong and showsignals, title = "Long", color = color.yellow, textcolor = color.yellow, text = "L", style = shape.triangleup, location = location.belowbar, size = size.tiny)
plotshape(goShort and showsignals, title = "Short", color = color.fuchsia, textcolor = color.fuchsia, text = "S", style = shape.triangledown, location = location.abovebar, size = size.tiny)


//Another aux indicator (RSI 9) tunned for 15 mins timeframe
RSI = ta.rsi(close, 50)
RSI_1 = ta.rsi(close[1], 50)
RSI_2 = ta.rsi(close[2], 50)

//Another aux indicator to evaluate tendency strenght using ADX (to use with RSI)
[di_plus, di_minus, adx] = calcADX(14) //14 for 15 mins at BTC/USDT
trend_strong = adx > 25                // just standard good value from the indicator author

//TRADING STRATEGY
is_pos_closed           = (strategy.position_size == 0.0)
is_long                 = strategy.position_size > 0
is_short                = strategy.position_size < 0
currentPositionPrice    = strategy.opentrades.entry_price(strategy.opentrades - 1)
longExitPrice           = currentPositionPrice * (1 + spread)
shortExitPrice          = currentPositionPrice * ( 1 - spread)
//longCrashProtectionPrice    = currentPositionPrice * (1 - crash_protection_price) //not used - enable si te da cuco
//shortCrashProtectionPrice    = currentPositionPrice * (1 + crash_protection_price) //not used - enable si te da cuco


// a.- EXIT CONDITIONS USING TRAILING STOP BASED ON ATR - DINAMICALLY

// Implement a threshold_high_volatility using ATR
float threshold_high_volatility = atr * 1.5
if atr > threshold_high_volatility
    mult := 2.0  // Ajuste más conservador en alta volatilidad


trailingStopPrice = 0.0
float atrMultiplier = mult //wtf, better rename the variable mult. 


// If we are in a long position
if (strategy.position_size > 0)
    // Evaluate the trailing stop price dinamically
    trailingStopPrice := math.max(trailingStopPrice, close - atr * atrMultiplier)
    

// if we are in a short position
if (strategy.position_size < 0)
    // Evaluate the trailing stop price dinamically for shorts
    trailingStopPrice := math.min(trailingStopPrice, close + atr * atrMultiplier)
    


// b.- TRADING CONDITIONS: 
//  Enter with the combination of signals + RSI + ADX 
//  Exit with combination of targetprice or trailingstoprice (as a dynamic protection measure considering volatility with ATR)

enterLongCondition  = is_pos_closed == true and goLong == true and (open > smax) and RSI > 45 and RSI_1 > 45 and RSI_2 > 45 and trend_strong
exitLongCondition = is_pos_closed == false and is_long == true and (close >= longExitPrice or close <= trailingStopPrice)
enterShortCondition     = is_pos_closed == true and goShort == true and (close < smin) and RSI < 55 and RSI_1 < 55 and RSI_2 < 55 and trend_strong
exitShortCondition = is_pos_closed == false and is_short == true and (close <= shortExitPrice or close >= trailingStopPrice)

//Execute orders
if between_dates

    //ALERT & WEBHOOK CUSTOM FIELDS: This is sending the order to the backend processor api (webhook) hosted at aws to send orders to exchanges 
    alertBotMessage = helpers.generateWebhookAlertMessage(BOT_WEBHOOK_KEY, BOT_STRATEGY_ID, BOT_SESSION_ID, BOT_PRODUCTION_RUN)
    
    strategy.entry("long_"+ BOT_SESSION_ID, direction = strategy.long, when = enterLongCondition, limit = close, comment = "EN-L", alert_message = alertBotMessage)
    strategy.exit("long_"+BOT_SESSION_ID, when = exitLongCondition, limit=high, comment = "EX-L", alert_message=alertBotMessage)
    //strategy.close("long", when = cancelLongCondition, comment = "CA-L")  
  
    strategy.entry("short_"+BOT_SESSION_ID, direction = strategy.short, when = enterShortCondition, limit = close, comment = "EN-S", alert_message = alertBotMessage)
    strategy.exit('short_'+BOT_SESSION_ID, when = exitShortCondition, limit=close, comment = "EX-S", alert_message = alertBotMessage)
    //strategy.close("short", when = cancelShortCondition, comment = "CA-S")



if is_pos_closed
    trailingStopPrice := na  // Reset the trailing on a new operation



// ————— Visuals

plot(trailingStopPrice, 'TrailingStopPrice',  (is_pos_closed == false) ? color.teal : na , style = plot.style_line)


//TABLE BACKTESTING STATS

// Declare performance tracking variables
var balance = strategy.initial_capital
var drawdown = 0.0
var maxDrawdown = 0.0
var maxBalance = 0.0
var totalPips = 0.0
var totalWins = 0
var totalLoss = 0
var dollarReturn = 0.0
var totalCommission = 0.0
var pnl = 0.0
var initialPrice = 0.0
var currentPrice = 0.0
var initialSize = 0.0

//declare table & visuals
var table t = table.new(position.middle_right, 3,6)
var bgcolor = color.new(color.black,0)


//only consider values between backtsesting range
if between_dates 

    // Detect winning trades
    if strategy.wintrades != strategy.wintrades[1]
        totalWins := totalWins + 1
        totalCommission += strategy.closedtrades.commission(strategy.closedtrades - 1)
        if balance > maxBalance
            maxBalance := balance
            
    // Detect losing trades
    if strategy.losstrades != strategy.losstrades[1]
    
        totalLoss := totalLoss + 1
        totalCommission += strategy.closedtrades.commission(strategy.closedtrades - 1)

        // Update drawdown
        drawdown := (balance / maxBalance) - 1
        if drawdown < maxDrawdown
            maxDrawdown := drawdown

    

    // Calculate commission

    
    dollarReturn := strategy.netprofit
    pnl := dollarReturn - totalCommission
    //log.info(str.tostring(BarsSinceFirstClosedEntry()))
    //initialPrice := ta.valuewhen(strategy.closedtrades.entry_time(0), open, 0)
    initialPrice := strategy.opentrades.entry_price(0)
    currentPrice := close
    //initialSize := strategy.closedtrades.size(0)
    initialSize := strategy.opentrades.size(0)
    //log.info("initial" + str.tostring(initialPrice))
    //log.info("current" + str.tostring(currentPrice))
    //log.info("size" + str.tostring(initialSize))
    


helpers.fillCell(t, 0,0,"Starting", "$" + str.tostring(strategy.initial_capital), bgcolor, color.white)
helpers.fillCell(t, 1,0,"Ending", "$" + str.tostring(helpers.truncate(strategy.initial_capital + strategy.netprofit - totalCommission,3)), bgcolor, color.white)
helpers.fillCell(t, 2,0,"Buy&Hold", "$" + str.tostring(helpers.truncate(math.abs(currentPrice*initialSize), 3)), bgcolor, color.white)



helpers.fillCell(t, 0,1,"Profit", "$" + str.tostring(helpers.truncate(dollarReturn,2)), dollarReturn > 0 ? color.green : color.red, color.white)
helpers.fillCell(t, 1,1,"Commission", "$" + str.tostring(helpers.truncate(totalCommission, 3)), bgcolor, color.white)
helpers.fillCell(t, 2,1, "PNL", "$"+ str.tostring(helpers.truncate(pnl, 2)), pnl > 0 ? color.green : color.red, color.white)

helpers.fillCell(t, 0,2,"Win Rate", str.tostring(helpers.truncate((strategy.wintrades/strategy.closedtrades)*100,2)) + "%", color.green, color.white)
helpers.fillCell(t, 1,2,"Net Return", (dollarReturn > 0 ? "+" : "") + str.tostring(helpers.truncate((dollarReturn / strategy.initial_capital)*100,2)) + "%", dollarReturn > 0 ? color.green : color.red, color.white)
helpers.fillCell(t, 2,2,"Real Return", (dollarReturn - totalCommission > 0 ? "+" : "-") + str.tostring(helpers.truncate(((dollarReturn - totalCommission) / strategy.initial_capital)*100,2)) + "%", (dollarReturn - totalCommission) > 0 ? color.green : color.red, color.white)

//helpers.fillCell(t, 2,2,"Loss Rate", str.tostring(truncate((strategy.losstrades/strategy.closedtrades)*100,2)) + "%", color.red, color.white)

helpers.fillCell(t, 0,3,"Avg Win", "$"+ str.tostring(helpers.truncate(strategy.grossprofit / strategy.wintrades, 5)), bgcolor, color.white)
helpers.fillCell(t, 1,3,"Avg Loss", "$"+ str.tostring(helpers.truncate(strategy.grossloss / strategy.losstrades, 5)), bgcolor, color.white)
helpers.fillCell(t, 2,3,"Profit Factor", str.tostring(helpers.truncate(strategy.grossprofit / strategy.grossloss, 2)) + "%", strategy.grossprofit / strategy.grossloss > 2 ? color.green : color.red , color.white)

helpers.fillCell(t, 0,4,"#Trades", str.tostring(strategy.closedtrades), bgcolor, color.white)
helpers.fillCell(t, 1,4,"#Win Trades", ""+ str.tostring(strategy.wintrades), bgcolor, color.white)
helpers.fillCell(t, 2,4,"#Loss Trades", ""+ str.tostring(strategy.losstrades), bgcolor, color.white)

helpers.fillCell(t, 0,5, "Pos.Open", str.tostring(is_pos_closed == true ? false : true), color.navy, color.white)
helpers.fillCell(t,1,5, "GoLong", str.tostring(goLong), color.navy, color.white)
helpers.fillCell(t,2,5, "GoShort", str.tostring(goShort), color.navy, color.white)


//helpers.fillCell(t, 1,0,"#Lose", str.tostring(totalLoss), color.red, color.white)
//helpers.fillCell(t, 2,0,"#Balance", str.tostring(maxBalance), color.aqua, color.white)
//helpers.fillCell(t, 3,0,"#Drawdown", str.tostring(maxDrawdown), color.aqua, color.white)



bgcolor(strategy.grossprofit > strategy.grossprofit[1] ? 
	 color.new(color.green, 80) : na)

bgcolor(strategy.grossloss > strategy.grossloss[1] ? 
     color.new(color.red, 80) : na)


